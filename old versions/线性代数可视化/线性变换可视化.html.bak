<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>线性变换可视化</title>
  <script src="https://cdn.plot.ly/plotly-2.27.0.min.js"></script>
  <style>
    :root {
      --bg: #0f0f14;
      --panel: #181824;
      --accent: #8a7bd1; /* 紫 */
      --accent-2: #b39ddb; /* 辅助紫 */
      --text: #e6e6f0;
      --muted: #a9a9b8; /* 灰紫 */
      --border: #2a2a3b;
    }
    body { margin: 0; background: var(--bg); color: var(--text); font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'PingFang SC', 'Microsoft YaHei', sans-serif; }
    .page[data-autolatex="true"] { display: flex; flex-direction: column; min-height: 100vh; }
    header.page-header { border-bottom: 1px solid var(--border); background: linear-gradient(90deg, #151522, #141321); }
    .header-inner { max-width: 1200px; margin: 0 auto; padding: 20px 16px; display: flex; align-items: baseline; gap: 16px; }
    .title { font-size: 20px; font-weight: 600; color: var(--text); }
    .subtitle { font-size: 14px; color: var(--muted); }

    .content { max-width: 1200px; margin: 0 auto; padding: 20px 16px; display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }

    .card { background: var(--panel); border: 1px solid var(--border); border-radius: 12px; padding: 16px; }
    .card h3 { margin: 0 0 12px; font-size: 16px; color: var(--accent); }
    .section-title { font-size: 14px; color: var(--muted); margin: 8px 0 12px; }

    .control-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 8px; margin-bottom: 12px; }
    .control-grid .group-title { grid-column: 1 / -1; font-size: 13px; color: var(--muted); margin: 8px 0; }
    .control { display: flex; flex-direction: column; gap: 6px; background: #1e1e2b; border: 1px solid var(--border); border-radius: 8px; padding: 8px; }
    .control label { font-size: 12px; color: var(--muted); }
    .control input { background: #12121a; color: var(--text); border: 1px solid var(--border); border-radius: 6px; padding: 6px 8px; font-size: 13px; }

    .mathjax-block { background: #1c1c29; border: 1px dashed var(--border); border-radius: 10px; padding: 10px 12px; margin: 10px 0; }
    .formula { color: var(--text); text-align: left; line-height: 1.6; }
    mjx-container { overflow-x: auto; overflow-y: hidden; white-space: normal; }

    .viz { height: 480px; }
    .legend { font-size: 12px; color: var(--muted); margin-top: 8px; }

    .examples-section .example-card { margin-top: 12px; }
    .examples-section .example-card .formula:last-child { text-align: left !important; }
  /* 统一风格对齐：蓝紫渐变背景 + 白色内容卡片 + 左侧导航 */
    body { background: linear-gradient(135deg, #3b3d7a 0%, #6b6ee8 100%); color: #1e1e2e; }
    header.page-header { display: none; }
    .page-content { display: flex; }
    .sidebar { width: 240px; position: fixed; top: 0; left: 0; bottom: 0; background: rgba(255,255,255,0.92); backdrop-filter: blur(6px); border-right: 1px solid rgba(0,0,0,0.06); padding: 16px 12px; overflow-y: auto; }
    .sidebar .nav-title { font-weight: 700; color: #1e2a78; margin-bottom: 8px; }
    .sidebar .nav-subtitle { font-size: 12px; color: #6370d6; margin-bottom: 12px; }
    .sidebar ul { list-style: none; margin: 0; padding: 0; }
    .sidebar li a { display: block; padding: 8px 10px; border-radius: 8px; color: #1f2340; text-decoration: none; }
    .sidebar li a:hover { background: rgba(55,71,255,0.08); color: #3747ff; }
    .sidebar li.active a { background: rgba(55,71,255,0.12); color: #3747ff; font-weight: 600; }
    .content { max-width: 1200px; margin: 0 auto; padding: 24px 16px; display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-left: 260px; }
    .card { background: #ffffff; border: 1px solid rgba(0,0,0,0.06); border-radius: 12px; padding: 16px; box-shadow: 0 6px 20px rgba(56,72,255,0.14); }
    .card h3 { color: #3747ff; }
    .formula, .legend { color: #1e1e2e; }
    .control { background: #f6f7ff; border-color: rgba(0,0,0,0.06); }
    .control input { background: #ffffff; color: #1e1e2e; border: 1px solid rgba(0,0,0,0.12); }
    .mathjax-block { background: #f8f8ff; border-color: rgba(0,0,0,0.06); }
  </style>
</head>
<body>
  <div class="sidebar">
    <div class="nav-title">线性代数</div>
    <div class="nav-subtitle">模块导航</div>
    <ul class="nav-list">
      <li class="sidebar-item"><a href="linear-algebra-module.html">模块概览</a></li>
      <li class="sidebar-item"><a href="二阶行列式可视化.html">二阶行列式</a></li>
      <li class="sidebar-item"><a href="三阶行列式可视化.html">三阶行列式</a></li>
      <li class="sidebar-item"><a href="矩阵运算可视化.html">矩阵运算</a></li>
      <li class="sidebar-item"><a href="向量空间可视化.html">向量空间</a></li>
      <li class="sidebar-item active"><a href="线性变换可视化.html">线性变换</a></li>
      <li class="sidebar-item"><a href="矩阵高斯消元法可视化.html">高斯消元法</a></li>
      <li class="sidebar-item"><a href="特征值分解可视化.html">特征值分解</a></li>
      <li class="sidebar-item"><a href="旋转矩阵可视化.html">旋转矩阵</a></li>
      <li class="sidebar-item"><a href="正交分解可视化.html">正交分解</a></li>
      <li class="sidebar-item"><a href="../index.html">返回主页</a></li>
    </ul>
  </div>
  <div class="page-content">
    <div class="page" data-autolatex="true">
    <header class="page-header">
      <div class="header-inner">
        <div class="title">线性变换可视化</div>
        <div class="subtitle">linear_algebra_dualcolumn_stable · 紫灰配色</div>
      </div>
    </header>

    <main class="content">
      <!-- 左栏：代数定义与公式 -->
      <section class="card main-content left-column">
        <h3>代数定义与公式</h3>
        <div class="section-title">线性变换定义</div>
        <div class="mathjax-block">
          <div class="formula">\\[ T(\\mathbf{x}) = A\\,\\mathbf{x},\\quad A = \\begin{bmatrix} a & b \\ c & d \\end{bmatrix},\\; \\mathbf{x} = \\begin{bmatrix} x \\ y \\end{bmatrix} \\]</div>
        </div>
        <div class="mathjax-block">
          <div class="formula">\\[ \\Rightarrow\\; T(\\mathbf{x}) = \\begin{bmatrix} a x + b y \\ c x + d y \\end{bmatrix} \\]</div>
        </div>

        <div class="section-title">参数设置</div>
        <div class="control-grid">
          <div class="group-title">矩阵 A 的元素</div>
          <div class="control"><label for="a">a</label><input id="a" type="number" step="0.1" value="1" /></div>
          <div class="control"><label for="b">b</label><input id="b" type="number" step="0.1" value="0" /></div>
          <div class="control"><label for="c">c</label><input id="c" type="number" step="0.1" value="0" /></div>
          <div class="control"><label for="d">d</label><input id="d" type="number" step="0.1" value="1" /></div>
          
          <div class="group-title">向量 \(\mathbf{x}\)</div>
          <div class="control"><label for="x">x</label><input id="x" type="number" step="0.1" value="1" /></div>
          <div class="control"><label for="y">y</label><input id="y" type="number" step="0.1" value="1" /></div>
          <div class="control" style="grid-column: span 2; align-items: flex-start; justify-content: flex-end;">
            <label>&nbsp;</label>
            <button id="reset" style="background: var(--accent); color: #0f0f14; border: none; border-radius: 6px; padding: 6px 10px; font-weight: 600; cursor: pointer;">重置为单位变换</button>
          </div>
        </div>

        <div class="mathjax-block">
          <div class="formula" id="resultFormula">\\[ T(\\mathbf{x}) = \\begin{bmatrix} 1 \\\\ 1 \\end{bmatrix} \\]</div>
        </div>

        <div class="examples-section">
          <div class="section-title">典型例题与应用</div>
          <div class="card example-card">
            <div class="formula">例：设 \(A=\begin{bmatrix}2 & 1\\0 & 1\end{bmatrix}\), \(\mathbf{x}=\begin{bmatrix}1\\2\end{bmatrix}\)</div>
            <div class="formula">计算 \(T(\mathbf{x}) = A\mathbf{x}\)</div>
            <div class="formula">结果：\(T(\mathbf{x})=\begin{bmatrix} 2\cdot1 + 1\cdot2 \\ 0\cdot1 + 1\cdot2 \end{bmatrix}=\begin{bmatrix}4\\2\end{bmatrix}\)</div>
          </div>
        </div>
      </section>

      <!-- 右栏：几何意义与交互 -->
      <section class="card geometry right-column">
        <h3>几何意义与交互</h3>
        <div id="plot" class="viz"></div>
        <div class="legend">紫色为原向量，淡紫为变换后向量；背景网格展示变换对单位方格的作用。</div>
      </section>
    </main>
  </div>
  </div>

  <script type="module">
    import { configureMathJax, ensureMathJaxScript, typesetPage } from '/app/lib/mathjax.js';
    import { enableAutoMath } from '/app/lib/autoMath.js';
    import { attachFormulaResizer } from '/app/lib/responsive-math.js';

    configureMathJax();
    ensureMathJaxScript();

    const pageEl = document.querySelector('.page');
    enableAutoMath(pageEl);

    function transformPoint(A, v) { return [A[0][0]*v[0] + A[0][1]*v[1], A[1][0]*v[0] + A[1][1]*v[1]]; }

    function generateGrid(A) {
      const lines = [];
      const range = [-2, -1, 0, 1, 2];
      for (const x of range) {
        const p1 = transformPoint(A, [x, -2]);
        const p2 = transformPoint(A, [x,  2]);
        lines.push({ x: [p1[0], p2[0]], y: [p1[1], p2[1]] });
      }
      for (const y of range) {
        const p1 = transformPoint(A, [-2, y]);
        const p2 = transformPoint(A, [ 2, y]);
        lines.push({ x: [p1[0], p2[0]], y: [p1[1], p2[1]] });
      }
      return lines;
    }

    function render(A, v) {
      const vTrans = transformPoint(A, v);
      const grid = generateGrid(A);

      const baseVec = { x: [0, v[0]], y: [0, v[1]], type: 'scatter', mode: 'lines+markers', name: '原向量', line: { color: '#8a7bd1', width: 3 }, marker: { color: '#8a7bd1' } };
      const transVec = { x: [0, vTrans[0]], y: [0, vTrans[1]], type: 'scatter', mode: 'lines+markers', name: '变换后', line: { color: '#b39ddb', width: 3 }, marker: { color: '#b39ddb' } };

      const gridTraces = grid.map(l => ({ x: l.x, y: l.y, type: 'scatter', mode: 'lines', line: { color: '#2a2a3b', width: 1 }, hoverinfo: 'skip', showlegend: false }));

      const layout = {
        paper_bgcolor: 'rgba(0,0,0,0)', plot_bgcolor: 'rgba(0,0,0,0)',
        xaxis: { range: [-3, 3], zeroline: true, gridcolor: '#222233', color: '#a9a9b8' },
        yaxis: { range: [-3, 3], zeroline: true, gridcolor: '#222233', color: '#a9a9b8' },
        margin: { l: 40, r: 20, t: 20, b: 40 },
        showlegend: false
      };

      Plotly.react('plot', [...gridTraces, baseVec, transVec], layout, { displayModeBar: false });
    }

    function updateFromInputs() {
      const a = parseFloat(document.getElementById('a').value);
      const b = parseFloat(document.getElementById('b').value);
      const c = parseFloat(document.getElementById('c').value);
      const d = parseFloat(document.getElementById('d').value);
      const x = parseFloat(document.getElementById('x').value);
      const y = parseFloat(document.getElementById('y').value);
      const A = [[a,b],[c,d]];
      const v = [x,y];
      const vt = [a*x + b*y, c*x + d*y];
      const resultEl = document.getElementById('resultFormula');
      resultEl.innerHTML = `\\[ T(\\\\mathbf{x}) = \\begin{bmatrix} ${vt[0].toFixed(2)} \\\\\\ ${vt[1].toFixed(2)} \\end{bmatrix} \\]`;
      typesetPage(document.body).then(() => attachFormulaResizer(document.body));
      render(A, v);
    }

    ['a','b','c','d','x','y'].forEach(id => {
      document.getElementById(id).addEventListener('input', updateFromInputs);
    });

    document.getElementById('reset').addEventListener('click', () => {
      document.getElementById('a').value = 1;
      document.getElementById('b').value = 0;
      document.getElementById('c').value = 0;
      document.getElementById('d').value = 1;
      document.getElementById('x').value = 1;
      document.getElementById('y').value = 1;
      updateFromInputs();
    });

    // 初始渲染与排版
    updateFromInputs();
    // typesetPage 会在 updateFromInputs 中调用，这里无需再次 await
    attachFormulaResizer(document.body);
  </script>
</body>
</html>